#!/usr/bin/env python

from __future__ import unicode_literals
from prompt_toolkit import prompt
from prompt_toolkit.completion import Completer, Completion
from prompt_toolkit.layout.lexers import PygmentsLexer
from prompt_toolkit.history import InMemoryHistory
from pygments.lexers.ml import SMLLexer
import pexpect, sys, uuid

poly = pexpect.spawn('poly')
poly.setecho(False)
poly.expect('> ')

prompt1 = uuid.uuid4().hex
prompt2 = uuid.uuid4().hex
poly.sendline(
    'PolyML.Compiler.prompt1 := "%s"; PolyML.Compiler.prompt2 := "%s";' %
    (prompt1, prompt2))
poly.expect(prompt1)

history = InMemoryHistory()
prompts = poly.compile_pattern_list([prompt1, prompt2])
lexer=PygmentsLexer(SMLLexer)

it = 'it_' + uuid.uuid4().hex

class PolyMLCompleter(Completer):
    def __init__(self, poly):
        self.poly = poly
    def globals(self, label):
        self.poly.sendline('List.app (fn (name, _) => TextIO.output (TextIO.stdOut, name ^ "\\n")) ((#%s PolyML.globalNameSpace) ());' % label)
        self.poly.expect(prompt1)
        names = self.poly.before.splitlines()[:-1]
        return names
    def update(self):
        self.poly.sendline('val %s = it;' % it)
        self.poly.expect(prompt1)
        self.fixes   = self.globals("allFix")
        self.functs  = self.globals("allFunct")
        self.sigs    = self.globals("allSig")
        self.structs = self.globals("allStruct")
        self.types   = self.globals("allType")
        self.vals    = self.globals("allVal")
        self.poly.sendline('val it = %s;' % it)
        self.poly.expect(prompt1)
    def get_completions(self, document, complete_event):
        word_before_cursor = document.get_word_before_cursor()
        for sym in self.vals + self.structs:
            if sym.startswith(word_before_cursor) and sym != it:
                yield Completion(sym, -len(word_before_cursor))

completer = PolyMLCompleter(poly)

def getline(message):
    line = prompt(message, lexer=lexer, history=history, completer=completer, vi_mode=True)
    poly.sendline(line)
    index = poly.expect_list(prompts)
    return index

try:
    while True:
        completer.update()
        index = getline('> ')
        while index != 0:
            index = getline('# ')
        sys.stdout.write(poly.before)
except pexpect.EOF:
    sys.stdout.write(poly.before)
except EOFError:
    pass

poly.close()
